<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>megaman</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>100</depth>
  <persistent>0</persistent>
  <parentName>cameraController</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>self.unitId = id;
self.canMove = true;
self.teamNumber = 2; //ai controlled by default
self.availableSprite = megaman;
self.exhaustedSprite = megaman_desaturated;
self.displayStats = false;  //whether or not to display the stats
self.tweenSpeed = 10;
self.targetX = x;
self.targetY = y;
self.mapWithAvailableMoves = 0;
self.mapWithAvailableAttacks = 0;
self.canAttack = false;

//battle stats
self.attackPower = 5;
self.attackRange = 1;
self.attackType = BasicAttack;
self.moveRange = 8;
//the name health is reserved
self.healthPoints = 30;
self.maxHealth = 30;

//create the menu
self.menuOptions[0] = OptionWait;
self.menuOptions[1] = OptionAttack;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="2">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if(self.healthPoints &lt;= 0)
    removeUnit(id);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//tween to the targetX
var distance = point_distance(x, y, self.targetX, self.targetY);
move_towards_point(self.targetX, self.targetY, min(self.tweenSpeed, distance));
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="6" enumb="51">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//deselect this unit
//destroys all instances of Indicators    
with (Indicator) {
     instance_destroy()
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="6" enumb="50">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//check if the current selected unit is this unit
if(global.selectedUnit == self.unitId &amp;&amp; self.canMove &amp;&amp; global.canSelectUnit){

    //get the grid index
    var gridIndexX = floor(mouse_x/global.gridSize);
    var gridIndexY = floor(mouse_y/global.gridSize);
    
    //set the potential new coordinates
    var newX = gridIndexX*global.gridSize;
    var newY = gridIndexY*global.gridSize;
    
    if(newX == x &amp;&amp; newY == y)
        exit;
    
    //check if the move is valid
    if(self.mapWithAvailableMoves[gridIndexX, gridIndexY] == -1){
        //move
        moveUnit(self.id, newX, newY);    
        
        var menu = instance_create(newX, newY, Menu);
        menu.menuOptions = self.menuOptions;
        menu.sourceUnit = id;
        
        global.canSelectUnit = false;
    }
    
    //destroys all instances of Indicators    
    with (Indicator) {
         instance_destroy()
    }
    //deselct this unit
    global.selectedUnit = 0;
}

if(self.canAttack){
    //get the grid index
    var gridIndexX = floor(mouse_x/global.gridSize);
    var gridIndexY = floor(mouse_y/global.gridSize);
     //check if the move is valid
    if(self.mapWithAvailableAttacks[gridIndexX, gridIndexY] == -1){
        //create an attack
        var attack = instance_create(gridIndexX * global.gridSize, gridIndexY*global.gridSize, self.attackType);        
        attack.sourceUnit = id;
        self.canAttack = false;
        //destroys all instances of Indicators    
        with (Indicator) {
             instance_destroy()
        }
        global.canSelectUnit = true;
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="6" enumb="11">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>self.displayStats = false;
depth = 100;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="6" enumb="10">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>self.displayStats = true;
depth = 0;  //sprite depth (bringing it to the front when the mouse is hovering)
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="6" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//destroys all instances of Indicators    
with (Indicator) {
     instance_destroy()
}
//check the playable team
if(global.playableTeam == self.teamNumber &amp;&amp; global.canSelectUnit &amp;&amp; self.canMove){
    //set the selected unit to self
    global.selectedUnit = self.unitId;
    self.mapWithAvailableMoves = getAvailableSpaces(floor(x/global.gridSize), floor(y/global.gridSize), self.moveRange, false);
    markAvailableSpaces(self.mapWithAvailableMoves, BlueIndicator);
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//draw its normal sprite
if(self.canMove)
    draw_sprite(self.availableSprite, 0, x, y);
else
    draw_sprite(self.exhaustedSprite, 0, x, y);
    
drawHealth(x, y, self.healthPoints/self.maxHealth);
    
draw_set_font(font_menu);
if(self.displayStats){
    var dx = view_xview[0];
    if(mouse_x &lt; view_wview[0]/2)
        dx += view_wview[0]-sprite_get_width(stats);
    draw_sprite(stats, -100, dx, 0);
    draw_text(dx, 0, "AttackPow: " + string(self.attackPower));
    draw_sprite(stats, -100, dx, 24);
    draw_text(dx, 24, "MoveRange: " + string(self.moveRange));
    draw_sprite(stats, -100, dx, 48);
    draw_text(dx, 48, "Health: " + string(self.healthPoints) + "/" + string(self.maxHealth));
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints>
    <point>0,0</point>
    <point>24,24</point>
  </PhysicsShapePoints>
</object>

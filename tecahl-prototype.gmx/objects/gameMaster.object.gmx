<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>-200</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//this object is more of an organizational thing. Just a place
//to initialize global variables
global.gridSize = 48;
global.selectedUnit = -13;
global.camSpeed = 10;
global.canSelectUnit = true;
global.playableTeam = 1;
global.mapWidth = 50;   //in tiles
global.mapHeight = 50;

//init the map
for(var i = 0; i &lt; global.mapWidth; i++){
    for(var j = 0; j &lt; global.mapHeight; j++){
        global.map[i,j] = 0;
    }
}

//set up the teams
addUnit(Unit, 1, 0, 0, 0);
addUnit(Warrior, 1, 1, 0, 1);
addUnit(Unit, 1, 2, 0, 2);
addUnit(Warrior, 1, 0, 3, 3);
addUnit(Warrior, 1, 1, 3, 4);
addUnit(Unit, 1, 2, 3, 5);

global.teamSizes[1] = 6;

addUnit(Enemy, 2, 13, 12, 0);
addUnit(Enemy, 2, 14, 12, 1);
addUnit(Enemy, 2, 15, 12, 2);
addUnit(Enemy, 2, 13, 13, 3);
addUnit(Enemy, 2, 14, 13, 4);
addUnit(Enemy, 2, 15, 13, 5);
global.teamSizes[2] = 6;
/*global.team1[0] = instance_create(0*global.gridSize, 0*global.gridSize, Unit);
global.team1[1] = instance_create(1*global.gridSize, 0*global.gridSize, Warrior);
global.team1[2] = instance_create(2*global.gridSize, 0*global.gridSize, Warrior);
global.team1[3] = instance_create(0*global.gridSize, 1*global.gridSize, Unit);
global.team1[4] = instance_create(1*global.gridSize, 1*global.gridSize, Warrior);
global.team1[5] = instance_create(2*global.gridSize, 1*global.gridSize, Warrior);

for(var i = 0; i &lt; array_length_1d(global.team1); i++){
    global.team1[i].teamNumber = 1;
}*/

//the non playable team
/*global.team2[0] = instance_create(12*global.gridSize, 12*global.gridSize, Enemy);
global.team2[1] = instance_create(13*global.gridSize, 12*global.gridSize, Enemy);
global.team2[2] = instance_create(14*global.gridSize, 12*global.gridSize, Enemy);
global.team2[3] = instance_create(12*global.gridSize, 13*global.gridSize, Enemy);
global.team2[4] = instance_create(13*global.gridSize, 13*global.gridSize, Enemy);
global.team2[5] = instance_create(14*global.gridSize, 13*global.gridSize, Enemy);
*/
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="2">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//check if all the units have moved
var moveEnemy = true;

//check if all the player's characters have moved
for(var i = 0; i &lt; global.teamSizes[1]; i++){
    if(global.team[global.playableTeam, i] != 0){
        if(global.team[global.playableTeam, i].canMove){
            moveEnemy = false;
        }
    }
}
var isOccupiedX;    //bool if a unit occupies this X coordinate
var isOccupiedY;    //bool if a unit occupies this Y coordinate
var nearest;        //id of nearest instance
var nearestX;       //X coordinate of nearest instance
var nearestY;       //Y coordinate of nearest instance
var dirX;           //X direction enemy will take
var dirY;           //Y direction enemy will take
var rangeX;         //X spaces enemy will move
var rangeY;         //Y spaces enemy will move
var coorX;          //new X index
var coorY;          //new Y index
var newX;           //new X coordinate
var newY;           //new Y coordinate
var k;              //index k
var occupy = false; 
var arrX;       
var arrY;
//enemy movement AI
if(moveEnemy){
    for(var i = 0; i &lt; global.teamSizes[2]; i++) 
    {
        
        k = -1;
        do {
            k++;
            //get corrdinates of nearest warrioras target
            nearest = instance_nearest(global.team[2, i].x, global.team[2, i].y, Warrior) - 100010;
            nearestX = global.team[1, nearest].x;
            nearestY = global.team[1, nearest].y;
            //get direction in regards to target
            if(global.team[2, i].x - nearestX &lt; 0)
                dirX = 1;
            else
                dirX = -1;
            if(global.team[2, i].y - nearestY &lt; 0)
                dirY = 1;
            else
                dirY = -1;
            switch(k)
            {
                case 0: {
                    //Right of target
                    if((global.team[2, i].x - nearestX)/global.gridSize + 1 &gt;= global.team[2, i].moveRange)
                        rangeX = global.team[2, i].moveRange;
                        else
                            rangeX = (global.team[2, i].x - nearestX)/global.gridSize + 1;
                    if((global.team[2, i].y - nearestY)/global.gridSize &gt;= global.team[2, i].moveRange)
                        rangeY = global.team[2, i].moveRange;
                        else
                            rangeY = (global.team[2, i].y - nearestY)/global.gridSize;
                        }
                        break;
                case 1: {
                    //Left of target
                    if((global.team[2, i].x - nearestX)/global.gridSize - 1 &gt;= global.team[2, i].moveRange)
                        rangeX = global.team[2, i].moveRange;
                        else
                            rangeX = (global.team[2, i].x - nearestX)/global.gridSize - 1;
                    if((global.team[2, i].y - nearestY)/global.gridSize &gt;= global.team[2, i].moveRange)
                        rangeY = global.team[2, i].moveRange;
                        else
                            rangeY = (global.team[2, i].y - nearestY)/global.gridSize;
                        }
                        break;
                case 2: {
                    //Above target
                    if((global.team[2, i].x - nearestX)/global.gridSize &gt;= global.team[2, i].moveRange)
                        rangeX = global.team[2, i].moveRange;
                        else
                            rangeX = (global.team[2, i].x - nearestX)/global.gridSize;
                    if((global.team[2, i].y - nearestY)/global.gridSize - 1 &gt;= global.team[2, i].moveRange)
                        rangeY = global.team[2, i].moveRange;
                        else
                            rangeY = (global.team[2, i].y - nearestY)/global.gridSize - 1;
                        }
                        break;
                case 3: {
                    //Below target
                    if((global.team[2, i].x - nearestX)/global.gridSize &gt;= global.team[2, i].moveRange)
                        rangeX = global.team[2, i].moveRange;
                        else
                            rangeX = (global.team[2, i].x - nearestX)/global.gridSize;
                    if((global.team[2, i].y - nearestY)/global.gridSize + 1 &gt;= global.team[2, i].moveRange)
                        rangeY = global.team[2, i].moveRange;
                        else
                            rangeY = (global.team[2, i].y - nearestY)/global.gridSize + 1;
                        }
                        break;
                case 4: {
                    rangeX = ceil(random_range(1, 9));
                    rangeY = ceil(random_range(1, 9));
                    k = 3;
                    }
                    break;
            }
            coorX = floor((global.team[2, i].x + rangeX * dirX * global.gridSize)/global.gridSize);
            coorY = floor((global.team[2, i].y + rangeY * dirY * global.gridSize)/global.gridSize);
            newX = global.team[2, i].x + (rangeX * dirX * global.gridSize);
            newY = global.team[2, i].y + (rangeY * dirX * global.gridSize);
            if(coorX &lt; 0 || coorY &lt; 0)
                occupy = true;
            else
            {
                //occupy = isOccupied(coorX, coorY);
                for(var j = 0; j &lt; global.teamSizes[1]; j++)
                {
                    if(coorX == floor(global.team[1, j].targetX/global.gridSize) &amp;&amp; 
                        coorY == floor(global.team[1, j].targetY/global.gridSize))
                    {
                        occupy = true;
                    }
                    else
                        occupy = false;
                }
                if(!occupy)
                {
                    for(j = 0; j &lt; i; j++)
                    {
                          if(coorX == arrX[j] &amp;&amp; coorY == arrY[j])
                            {
                                occupy = true;
                            }
                    }
                }
                //show_message("i " + string(i) +" k "+string(k)+"| coor: " + string(coorX) + ", " + string(coorY)
                //+ "occupy: " + string(occupy));
            }
            } until (!occupy);
        moveUnit(global.team[2, i] , newX, newY);
        arrX[i] = coorX;
        arrY[i] = coorY;
        for(j = 0; j &lt; global.teamSizes[1]; j++)
        {
            if((coorX + 1 == floor(global.team[1, j].targetX/global.gridSize)) &amp;&amp;
                (coorY == floor(global.team[1, j].targetY/global.gridSize)))
            {
                var attack = instance_create((coorX + 1) * global.gridSize, coorY * global.gridSize, global.team[2, i].attackType);        
                attack.sourceUnit = global.team[2, i];
            }
            else if((coorX - 1 == floor(global.team[1, j].targetX/global.gridSize)) &amp;&amp;
                    (coorY == floor(global.team[1, j].targetY/global.gridSize)))
            {
                var attack = instance_create((coorX - 1) * global.gridSize, coorY * global.gridSize, global.team[2, i].attackType);        
                attack.sourceUnit = global.team[2, i];
            }
            else if((coorX == floor(global.team[1, j].targetX/global.gridSize)) &amp;&amp;
                    (coorY + 1 == floor(global.team[1, j].targetY/global.gridSize)))
            {
                var attack = instance_create(coorX * global.gridSize, (coorY + 1) * global.gridSize, global.team[2, i].attackType);        
                attack.sourceUnit = global.team[2, i];
            }
            else if((coorX == floor(global.team[1, j].targetX/global.gridSize)) &amp;&amp;
                    (coorY - 1 == floor(global.team[1, j].targetY/global.gridSize)))
            {
                var attack = instance_create(coorX * global.gridSize, (coorY - 1) * global.gridSize, global.team[2, i].attackType);        
                attack.sourceUnit = global.team[2, i];
            }
        }
    }
    //reset playable team to active
    for(i = 0; i &lt; global.teamSizes[1]; i++){
        global.team[1, i].canMove = true;
        global.team[1, i].sprite_index = global.team[1, i].availableSprite;
    }
}

</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
